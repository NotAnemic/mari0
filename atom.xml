<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Getting The Gist]]></title>
  <link href="http://tannerrogalsky.github.com/atom.xml" rel="self"/>
  <link href="http://tannerrogalsky.github.com/"/>
  <updated>2014-05-07T19:17:54-04:00</updated>
  <id>http://tannerrogalsky.github.com/</id>
  <author>
    <name><![CDATA[Tanner Rogalsky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SPORTBALL - Global Game Jam 2014]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2014/01/28/sportball/"/>
    <updated>2014-01-28T21:43:59-05:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2014/01/28/sportball</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/9b1SSQp.png"/></p>

<p>It was the Global Game Jam this past weekend which meant that most of Toronto&rsquo;s fantastic game dev scene came out, formed teams and made game over the course of a weekend. It was, as always, so amazing to see 300 people come together and build a community as well as some kick-ass games in 48 hours. A million thanks to Troy Darc and Randy Orenstein and their supporting cast for making TGGJ happen and making it feel as good as it does.</p>

<p>This weekend, I made a game called Sportball. It&rsquo;s a multiplayer game where you try to coerce a lot of coloured units into pushing a ball into your coloured net. The game was made with gamepads in mind but it can also be played with WASD and arrows keys on a keyboard. It&rsquo;s very easy to lose your units but they are constantly respawning so you just need to make sure you don&rsquo;t lose as many as your opponent while you&rsquo;re trying to score a goalpoint.</p>

<p>The concept was inspired by the <a href="http://www.mariowiki.com/Double_Cherry">Double Cherry</a> item in Super Mario 3D World. It duplicates the character you&rsquo;re controlling and I thought it was so fun that I wanted to make a game where that was the main mechanic. My team on this project was Erica Gregory for art and Maggie McLean for music. They both did a fantastic job and this game wouldn&rsquo;t be nearly as good without them.</p>

<p><a href="http://imgur.com/a/yantK">Screenshots</a></p>

<h3>Downloads:</h3>


<ul>
  <li><a href="https://stackmachine.com/games/c33f8fbe1432eda332cc68ac/download/windows">Windows</a></li>
  <li><a href="https://stackmachine.com/games/c33f8fbe1432eda332cc68ac/download/osx">OSX</a></li>
  <li><a href="https://stackmachine.com/games/c33f8fbe1432eda332cc68ac/download/love">.love</a></li>
</ul>


<p>One thing I&rsquo;m trying is to distribute this game (at least initially) through <a href="https://stackmachine.com">StackMachine</a>. It&rsquo;s a very clever little website that packages, updates and gives error reports on your game. If you make anything using the Love2D framework, I recommended checking it out.</p>

<p>Grab a friend and try out some Sportball!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Searching Through Lua Tables]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2013/07/15/stop-searching-through-lua-tables/"/>
    <updated>2013-07-15T17:39:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2013/07/15/stop-searching-through-lua-tables</id>
    <content type="html"><![CDATA[<p>I had this conversation with someone on reddit the other day and thought it might make a useful blog post.</p>

<p>tl;dr stop searching through Lua tables. There are very few instances where you should be using a <code>for</code> loop to look for a particular element in a Lua table. Instead, you should be using some kind of identifying information as the key and element as the value in the table.</p>

<p>For example, in LÖVE, the physics collision callbacks return three things: 2 fixtures (physics elements) and a contact (an object representing containing collision information). Lets say you&rsquo;ve set up your physics and your collision callbacks and everything is working. But fixtures probably aren&rsquo;t the object you want to operate on when there&rsquo;s a collision happening. You probably want the body that owns that fixture or maybe even some other table that owns that body! You now have three options:</p>

<p>1) You can loop through every body in your game and check its fixtures until you find the ones you&rsquo;ve just had collide. This is simple and easy to understand but it&rsquo;s going to get pretty slow when you&rsquo;ve got a lot of object colliding often. You probably need something speedier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">on_collide</span><span class="p">(</span><span class="n">fixture_a</span><span class="p">,</span> <span class="n">fixture_b</span><span class="p">,</span> <span class="n">contact</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">body_a</span><span class="p">,</span> <span class="n">body_b</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">body</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">World</span><span class="p">:</span><span class="n">getBodyList</span><span class="p">())</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">fixture</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">body</span><span class="p">:</span><span class="n">getFixtureList</span><span class="p">())</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">fixture</span> <span class="o">==</span> <span class="n">fixture_a</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">body_a</span> <span class="o">=</span> <span class="n">body</span>
</span><span class='line'>      <span class="k">elseif</span> <span class="n">fixture</span> <span class="o">==</span> <span class="n">fixture_b</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">body_b</span> <span class="o">=</span> <span class="n">body</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">body_a</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="ow">and</span> <span class="n">body_b</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) You can use <a href="https://www.love2d.org/wiki/Fixture:setUserData">Fixture:setUserData</a> and set the user data as whatever parent element you want. This is a fast solution but it&rsquo;s not a pattern that we can follow everywhere and it&rsquo;s not immediately obvious that fixture user data should always be physics bodies. This is good but we can do better.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">on_collide</span><span class="p">(</span><span class="n">fixture_a</span><span class="p">,</span> <span class="n">fixture_b</span><span class="p">,</span> <span class="n">contact</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">body_a</span> <span class="o">=</span> <span class="n">fixture_a</span><span class="p">:</span><span class="n">getUserData</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">body_b</span> <span class="o">=</span> <span class="n">fixture_b</span><span class="p">:</span><span class="n">getUserData</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) The best way is have another table that uses the fixtures as the key and a parent element as the value. You&rsquo;ll have to manually clean up these references if you destroy the fixture but it&rsquo;s fast and something that you have complete control over, unlike the user data method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">objects</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">createObj</span><span class="p">()</span>
</span><span class='line'>     <span class="kd">local</span> <span class="n">object</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>     <span class="n">object</span><span class="p">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">love</span><span class="p">.</span><span class="n">physics</span><span class="p">.</span><span class="n">newBody</span><span class="p">(</span><span class="n">world</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">dynamic&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="n">object</span><span class="p">.</span><span class="n">shape</span> <span class="o">=</span> <span class="n">love</span><span class="p">.</span><span class="n">physics</span><span class="p">.</span><span class="n">newRectangleShape</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>     <span class="n">object</span><span class="p">.</span><span class="n">fixture</span> <span class="o">=</span> <span class="n">love</span><span class="p">.</span><span class="n">physics</span><span class="p">.</span><span class="n">newFixture</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">body</span><span class="p">,</span> <span class="n">object</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class='line'>     <span class="n">object</span><span class="p">.</span><span class="n">otherinfo</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'>     <span class="n">object</span><span class="p">.</span><span class="n">otherinfo2</span> <span class="o">=</span> <span class="mi">321</span>
</span><span class='line'>     <span class="n">objects</span><span class="p">[</span><span class="n">object</span><span class="p">.</span><span class="n">fixture</span><span class="p">]</span> <span class="o">=</span> <span class="n">object</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">on_collide</span><span class="p">(</span><span class="n">fixture_a</span><span class="p">,</span> <span class="n">fixture_b</span><span class="p">,</span> <span class="n">contact</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">object_a</span> <span class="o">=</span> <span class="n">objects</span><span class="p">[</span><span class="n">fixture_a</span><span class="p">]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">object_b</span> <span class="o">=</span> <span class="n">objects</span><span class="p">[</span><span class="n">fixture_b</span><span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This type of pattern is something that you can use everywhere and generally cuts down your operation complexity from O(n) to O(1). The only time you can&rsquo;t use this is if you absolutely need the elements to be ordered or if you need to know the size of the list. Every other time you should strongly consider using a hash in this pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TOJam 2013 - Where?House]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2013/05/06/where-house/"/>
    <updated>2013-05-06T12:50:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2013/05/06/where-house</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/PCtbyh5.png" /></p>

<p><i>Sokoban</i> is a Japanese word that translates to “warehouse keeper.” It’s a termed used for a genre of games that involve pushing blocks around to solve puzzles. You’ve probably played games that do this. Think Zelda-style rock pushing puzzles or Chip’s Challenge.</p>

<p><i>Non-euclidean geometry</i> is a subset of geometry that disregards certain principles about the way that space works. You might have experienced this in games like Portal or Antichamber.</p>

<p>Over the weekend, at TOJam 2013, a group of friends and I made a non-euclidean sokoban game called Where?House. It has 17 levels of progressing difficulty, fantastic graphics and sounds. I’m really proud of how it came out. Thanks to everyone who helped out as well as TOJam for organizing the event.</p>

<p>Andrew Glisinski &ndash; Art<br/>
Chris Baragar &ndash; Level Design<br/>
Kyle Johnston &ndash; Music &amp; SFX<br/>
Maggie McLean &ndash; SFX<br/>
Tanner Rogalsky &ndash; Code<br/></p>

<p>Here are some download links.</p>

<ul>
  <li><a href="ftp://ssh.tannerrogalsky.com/wherehouse_win_x86.zip">Windows 32-bit</a> / <a href="https://www.box.com/s/ycqq31rsmafggzk215rt">Alternative</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/wherehouse_win_x64.zip">Windows 64-bit</a> / <a href="https://www.box.com/s/l7n1b3033ozq9f1qxq6x">Alternative</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/wherehouse_mac.zip">Mac</a> / <a href="https://www.box.com/s/u9t1endufx78ipzyn91o">Alternative</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/wherehouse.love">Source</a> / <a href="https://www.box.com/s/qe1uidshifb1237pipr3">Alternative</a></li>
</ul>


<p>If you don&rsquo;t care about the specifics of how this was done, feel free to stop reading now.</p>

<p>Essentially, each level is a 2D grid made up of tiles. By default, each tile has four siblings: one in each cardinal direction. However, it’s not necessary that any given sibling be a direct neighbor to the tile. Heading North from a tile may send you across the map whereas heading East may put you just to the right of where you were.</p>

<p>Rendering these transitions consistently is something that I’m really pleased with. When you’re static, we draw you once in the tile that you exist in. When you’re moving, we draw you twice: first, we draw you tweening in the direction you requested to move. We also clip the rendering to your tile of origin. Second, we draw you tweening into the sibling tile while clipping the rendering to the sibling tile. We do this whether the sibling you’re moving to is a euclidean one or not and it works because the tweens sync up and it creates the illusion of a single render. It really helps to communicate what’s happening and ensure that players don’t think it’s just a bug.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TGGJ13 - Electric Boobaloo]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2013/02/11/electric-boobaloo/"/>
    <updated>2013-02-11T19:06:00-05:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2013/02/11/electric-boobaloo</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/8DB1JWf.png" /></p>

<p>I&rsquo;m a serial game jammer. I love it: the community, the productivity, the whole shebang. I do them as often as I can. But this year&rsquo;s Toronto Global Game Jam took it up a notch. Troy Morrissey and Randy Orenstein did an amazing job organizing and running the event. The atmosphere of the entire weekend was sublime.</p>

<p>I also worked with an amazing team this year: Noreen Rana did visuals and Maggie McLean did audio. They&rsquo;re both fantastic.</p>

<p>One thing we did this jam that I haven&rsquo;t really done (at least not explicitly) was really leveraged the fact that we&rsquo;re surrounded by brilliant and creative people for a weekend. Almost all of the sound effects that you&rsquo;ll hear in the game were recorded from jam participants during the weekend. It was a great way to meet fellow jammers and have a lot of fun in the process. I&rsquo;ll definitely try to find a way to integrate more of my peers into my games in future jams.</p>

<p>Without further ado:</p>

<ul>
  <li><a href="ftp://ssh.tannerrogalsky.com/electric_boobaloo_win_x86.zip">Windows 32-bit</a> <a href="https://www.box.com/shared/9y0e9zuixz69d69fi9ka">Alternative</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/electric_boobaloo_win_x64.zip">Windows 64-bit</a> <a href="https://www.box.com/shared/zsx85r3ti4rxmf7b9eel">Alternative</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/electric_boobaloo_mac.zip">Mac</a> <a href="https://www.box.com/shared/vzm5esud35w5yln4nz57">Alternative</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/electric_boobaloo.love">Source</a> <a href="https://www.box.com/shared/q3sdgj1zyxxp6fic87kl">Alternative</a></li>
</ul>


<p>Linux users should download the source and the appropriate <a href="https://love2d.org/">Love2D</a> binary for their distro. It requires version 0.8.0. Compiling Love2D from source is also really easy on Linux but I feel like you&rsquo;re sort of making your life harder than it needs to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colors and Metatables]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2012/11/20/colors-and-metatables/"/>
    <updated>2012-11-20T15:06:00-05:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2012/11/20/colors-and-metatables</id>
    <content type="html"><![CDATA[<p><a href="https://love2d.org/">Love2D</a>, like any good framework built for Lua, keeps it simple and to the point. So there are some things you can either implement yourself or use a third party library. If you&rsquo;re down with the latter, you might be interested in my color index built with metatables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">COLORS</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">rgb</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="k">return</span> <span class="n">color</span><span class="p">.</span><span class="n">r</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">g</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">b</span> <span class="k">end</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">rgba</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="k">return</span> <span class="n">color</span><span class="p">.</span><span class="n">r</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">g</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">a</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">COLORS</span> <span class="o">=</span> <span class="nb">setmetatable</span><span class="p">({},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">__newindex</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>      <span class="n">v</span><span class="p">.</span><span class="n">rgb</span> <span class="o">=</span> <span class="n">rgb</span>
</span><span class='line'>      <span class="n">v</span><span class="p">.</span><span class="n">rgba</span> <span class="o">=</span> <span class="n">rgba</span>
</span><span class='line'>      <span class="nb">rawset</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__index</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">rawget</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span><span class="n">upper</span><span class="p">())</span>
</span><span class='line'>    <span class="k">end</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">COLORS</span><span class="p">.</span><span class="n">RED</span> <span class="o">=</span>    <span class="p">{</span><span class="n">r</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">}</span>
</span><span class='line'><span class="n">COLORS</span><span class="p">.</span><span class="n">GREEN</span> <span class="o">=</span>  <span class="p">{</span><span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">g</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">}</span>
</span><span class='line'><span class="n">COLORS</span><span class="p">.</span><span class="n">BLUE</span> <span class="o">=</span>   <span class="p">{</span><span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">b</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">}</span>
</span><span class='line'><span class="n">COLORS</span><span class="p">.</span><span class="n">WHITE</span> <span class="o">=</span>  <span class="p">{</span><span class="n">r</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">}</span>
</span><span class='line'><span class="n">COLORS</span><span class="p">.</span><span class="n">BLACK</span> <span class="o">=</span>  <span class="p">{</span><span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">}</span>
</span><span class='line'><span class="n">COLORS</span><span class="p">.</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="p">{</span><span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">g</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">}</span>
</span><span class='line'><span class="n">COLORS</span><span class="p">.</span><span class="n">PURPLE</span> <span class="o">=</span> <span class="p">{</span><span class="n">r</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>   <span class="n">b</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage is like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">love</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">setColor</span><span class="p">(</span><span class="n">COLORS</span><span class="p">.</span><span class="n">GREEN</span><span class="p">:</span><span class="n">rgb</span><span class="p">())</span>
</span><span class='line'><span class="n">love</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">setColor</span><span class="p">(</span><span class="n">COLORS</span><span class="p">.</span><span class="n">GREEN</span><span class="p">:</span><span class="n">rgba</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use either upper or lower cases (or a combination) to specify color names (i.e. <code>COLORS.GREEN:rgb == COLORS.green:rgb</code>). A full explanation of the code follows. It&rsquo;s mostly an explanation of Lua metatables.<!--more--></p>

<p>Firstly, we declare an empty <code>COLORS</code> variable. This is because we&rsquo;re going to be sandboxing to avoid unnecessary anonymous function creation and we still want to be able to access our colors outside of the sandbox. Then we start our <code>do</code> block and declare some helper functions. We can do this because they will be local to the scope of the do block and will be discarded after we exit the block on line 15.</p>

<p>On the fifth line is where the fun starts. We&rsquo;re going to assign a table to the <code>COLORS</code> variable but, before we do that, we&rsquo;re going to modify how the table reacts to certain things by applying a metatable to it. The <code>__newindex</code> function defines what a table does when you put something new in it. The <code>__index</code> function defines what a table does when you try to access a key that hasn&rsquo;t been assigned.</p>

<p>The <code>__newindex</code> function gets passed three arguments: the table itself, the key being assigned and the value that we&rsquo;re trying to assign to the key. In this case, the key is going to be a color name and the value is going to be a table of red, green, blue, and alpha values that correspond to that color. We&rsquo;re going to add the two helper functions that we defined earlier to the rgba table. Those helpers are now, in the context of the color table, going to let us pull the values out of that table in a way that makes sense and can be used by Love2D. Line 9 actually sets the table of color values into the color map; that is to say that it sets the value, ignoring the <code>__newindex</code> function.</p>

<p>The <code>__index</code> function gets passed two arguments: the table and the key being assigned. Remember, this only gets called when we&rsquo;re trying to access a key that hasn&rsquo;t been defined. In that case, we want to convert the color name to all caps and try again because we either used lowercase letters in the color name or there&rsquo;s an error in the code.</p>

<p>The rest of the snippet is just setting up some colors. Each time we set up a new color, the <code>__newindex</code> function runs, doing additional setup to the rgb map. And that&rsquo;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Favourite Lua Libraries]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2012/09/19/favourite-lua-libraries/"/>
    <updated>2012-09-19T14:06:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2012/09/19/favourite-lua-libraries</id>
    <content type="html"><![CDATA[<p>I really like a Lua as a programming language for a variety of reasons. It is probably my favourite language for prototyping and just messing around with. However one of the pain points I hear people talk about often is the minimal standard library that comes with the interpreter. Perhaps to alleviate some of that frustration but mostly just to talk about some libraries that I think are really cool, I wanted to put together a list of my favourite 5 Lua libs. Many of them are very general but some of them are more geared toward game development since that tends to be what I use Lua for.<!--more--></p>

<h2>MiddleClass</h2>

<p><a href="https://github.com/kikito/middleclass">MiddleClass</a> is an OOP library. It&rsquo;s straight-forward and gives a lot of the OO features that you would probably want in a library like this including static methods, subclassing, mixins and various helpers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">require</span> <span class="s1">&#39;</span><span class="s">middleclass&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Person</span> <span class="o">=</span> <span class="n">class</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Person&#39;</span><span class="p">)</span> <span class="c1">--this is the same as class(&#39;Person&#39;, Object) or Object:subclass(&#39;Person&#39;)</span>
</span><span class='line'><span class="k">function</span> <span class="nf">Person</span><span class="p">:</span><span class="n">initialize</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">function</span> <span class="nf">Person</span><span class="p">:</span><span class="n">speak</span><span class="p">()</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Hi, I am &#39;</span> <span class="o">..</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">..</span><span class="s1">&#39;</span><span class="s">.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">AgedPerson</span> <span class="o">=</span> <span class="n">class</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">AgedPerson&#39;</span><span class="p">,</span> <span class="n">Person</span><span class="p">)</span> <span class="c1">-- or Person:subclass(&#39;AgedPerson&#39;)</span>
</span><span class='line'><span class="n">AgedPerson</span><span class="p">.</span><span class="n">static</span><span class="p">.</span><span class="n">ADULT_AGE</span> <span class="o">=</span> <span class="mi">18</span> <span class="c1">--this is a class variable</span>
</span><span class='line'><span class="k">function</span> <span class="nf">AgedPerson</span><span class="p">:</span><span class="n">initialize</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
</span><span class='line'>  <span class="n">Person</span><span class="p">.</span><span class="n">initialize</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="c1">-- this calls the parent&#39;s constructor (Person.initialize) on self</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">function</span> <span class="nf">AgedPerson</span><span class="p">:</span><span class="n">speak</span><span class="p">()</span>
</span><span class='line'>  <span class="n">Person</span><span class="p">.</span><span class="n">speak</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="c1">-- prints &quot;Hi, I am xx.&quot;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">&lt;</span> <span class="n">AgedPerson</span><span class="p">.</span><span class="n">ADULT_AGE</span><span class="p">)</span> <span class="k">then</span> <span class="c1">--accessing a class variable from an instance method</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">I am underaged.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">I am an adult.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">AgedPerson</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Billy the Kid&#39;</span><span class="p">,</span> <span class="mi">13</span><span class="p">)</span> <span class="c1">-- this is equivalent to AgedPerson(&#39;Billy the Kid&#39;, 13) - the :new part is implicit</span>
</span><span class='line'><span class="kd">local</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">AgedPerson</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Luke Skywalker&#39;</span><span class="p">,</span> <span class="mi">21</span><span class="p">)</span>
</span><span class='line'><span class="n">p1</span><span class="p">:</span><span class="n">speak</span><span class="p">()</span>
</span><span class='line'><span class="n">p2</span><span class="p">:</span><span class="n">speak</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">Hi</span><span class="p">,</span> <span class="n">I</span><span class="s1">&#39;</span><span class="s">m Billy the Kid.</span>
</span><span class='line'><span class="n">I</span> <span class="n">am</span> <span class="n">underaged</span><span class="p">.</span>
</span><span class='line'><span class="n">Hi</span><span class="p">,</span> <span class="n">I</span><span class="s1">&#39;</span><span class="s">m Luke Skywalker.</span>
</span><span class='line'><span class="n">I</span> <span class="n">am</span> <span class="n">an</span> <span class="n">adult</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Busted</h2>

<p><a href="http://olivinelabs.com/busted/">Busted</a> is a unit testing framework. Easily the best one I&rsquo;ve seen for Lua. It&rsquo;s well-documented, flexible and very fully-featured, even supporting alternative language packs. It has several assert styles, object introspection, mocks and spies and error trapping, oh my! If you&rsquo;re used to writing unit tests with any other framework, this will probably not be a big leap for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">require</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">busted&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Busted unit testing framework&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">should be awesome&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">should be easy to use&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">truthy</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Yup.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">should have lots of features&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">-- deep check comparisons!</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">are</span><span class="p">.</span><span class="n">same</span><span class="p">({</span> <span class="n">table</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">great&quot;</span><span class="p">},</span> <span class="p">{</span> <span class="n">table</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">great&quot;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">-- or check by reference!</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">are_not</span><span class="p">.</span><span class="n">equal</span><span class="p">({</span> <span class="n">table</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">great&quot;</span><span class="p">},</span> <span class="p">{</span> <span class="n">table</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">great&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">true</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">falsy</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">has</span><span class="p">.</span><span class="nb">error</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="nb">error</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Wat&quot;</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Wat&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">should provide some shortcuts to common functions&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">are</span><span class="p">.</span><span class="n">unique</span><span class="p">({</span> <span class="p">{</span> <span class="n">thing</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="n">thing</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span> <span class="n">thing</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">should have mocks and spies for functional tests&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">thing</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">thing_module&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">spy</span><span class="p">.</span><span class="n">spy_on</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">greet&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">thing</span><span class="p">.</span><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Hi!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">spy</span><span class="p">(</span><span class="n">thing</span><span class="p">.</span><span class="n">greet</span><span class="p">).</span><span class="n">was</span><span class="p">.</span><span class="n">called</span><span class="p">()</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">.</span><span class="n">spy</span><span class="p">(</span><span class="n">thing</span><span class="p">.</span><span class="n">greet</span><span class="p">).</span><span class="n">was</span><span class="p">.</span><span class="n">called_with</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Hi!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hardon Collider</h2>

<p>The collision library with the juvenile name, <a href="https://github.com/vrld/HardonCollider">Hardon Collider</a> is nevertheless great at what it does. I tend to hate physics libraries that try to do too much for you which is why I love this one. You provide callbacks for when objects collide and stop colliding and it handles everything else using a nifty technique called &ldquo;spatial hashes&rdquo; (which is to say that it only checks for collisions between objects that are close to each other in the collider space). The callbacks get passed the time delta, the two physics objects and how far they would have to move to resolve the collision. It makes it really easy to offload the collision handling into the game objects themselves thereby compartmentalizing your code really nicely. For example, here&rsquo;s the entirety of the collision callback for [Gridphreak].</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nc">Main</span><span class="p">.</span><span class="nf">on_start_collide</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="n">shape_one</span><span class="p">,</span> <span class="n">shape_two</span><span class="p">,</span> <span class="n">mtv_x</span><span class="p">,</span> <span class="n">mtv_y</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">object_one</span><span class="p">,</span> <span class="n">object_two</span> <span class="o">=</span> <span class="n">shape_one</span><span class="p">.</span><span class="n">parent</span><span class="p">,</span> <span class="n">shape_two</span><span class="p">.</span><span class="n">parent</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">object_one</span><span class="p">.</span><span class="n">on_collide</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">function&quot;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">object_one</span><span class="p">:</span><span class="n">on_collide</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="n">shape_one</span><span class="p">,</span> <span class="n">shape_two</span><span class="p">,</span> <span class="n">mtv_x</span><span class="p">,</span> <span class="n">mtv_y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">object_two</span><span class="p">.</span><span class="n">on_collide</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">function&quot;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">object_two</span><span class="p">:</span><span class="n">on_collide</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="n">shape_two</span><span class="p">,</span> <span class="n">shape_one</span><span class="p">,</span> <span class="o">-</span><span class="n">mtv_x</span><span class="p">,</span> <span class="o">-</span><span class="n">mtv_y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cron.lua</h2>

<p><a href="https://github.com/kikito/cron.lua">cron.lua</a> are a set of functions for executing actions at a certain time interval and it is amazing. Put a single reference to <code>cron.update(dt)</code> in your game loop and then just execute callback functions whenever you want complete with Lua&rsquo;s super powerful scoping. You can build entire games with this thing; it is really nice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">cron</span> <span class="o">=</span> <span class="nb">require</span> <span class="s1">&#39;</span><span class="s">cron&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">printMessage</span><span class="p">()</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">Hello&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the following calls are equivalent:</span>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">after</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">printMessage</span><span class="p">)</span>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">after</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nb">print</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">Hello&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">-- will print &#39;Hello&#39; twice</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- this will print the message periodically:</span>
</span><span class='line'><span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">cron</span><span class="p">.</span><span class="n">every</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">printMessage</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">-- nothing</span>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1">-- nothing</span>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="c1">-- prints &#39;Hello&#39; twice</span>
</span><span class='line'>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">cancel</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="c1">-- stops the execution the element defined by id. Works with periodical or one-time actions.</span>
</span><span class='line'>
</span><span class='line'><span class="n">cron</span><span class="p">.</span><span class="n">reset</span><span class="p">()</span> <span class="c1">-- stops all the current actions, both timed ones and periodical ones.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inspect.lua</h2>

<p><a href="https://github.com/kikito/inspect.lua">Inspect.lua</a> is a really simple tool for debugging the contents of tables. It&rsquo;s the kind of thing that might even be cool to implement just for the learning but this one is pretty nice. Every project of any decent size is probably going to wish for something like this at some point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">inspect</span><span class="p">({</span><span class="n">a</span><span class="o">=</span><span class="p">{</span><span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">}})</span> <span class="o">=</span> <span class="s">[[&lt;1&gt;{</span>
</span><span class='line'><span class="s">  a = &lt;2&gt;{</span>
</span><span class='line'><span class="s">    b = 2</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it. Three of these libraries are written by one guy, <a href="https://github.com/kikito">kikito</a>, so if you want to browse more cool Lua, you should head over to his github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TOJam 2012 - [GRIDPHREAK]]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2012/05/15/tojam-2012-gridphreak/"/>
    <updated>2012-05-15T18:14:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2012/05/15/tojam-2012-gridphreak</id>
    <content type="html"><![CDATA[<p>This past weekend I participated in the largest gamejam Toronto has ever seen. Over four hundred people got together, each trying to make a video game in 48 hours. Last year&rsquo;s TOJam was the first gamejam I&rsquo;d ever gone to and I credit the hardwork of Rob, Em, Jim, their compatriots, and all the jammers with making TOJam such an amazing atmosphere to work in. I will do this jam every year it is hosted; it&rsquo;s the best.</p>

<p>This year I made a game that I&rsquo;ve had in my head for a while. It&rsquo;s a top-down schmup (shoot-em-up) like Crimsonland, Smash TV or Asteroids. Where it differs from each of those games is that it also has dynamic lighting: you can&rsquo;t necessarily see the enemies on the screen unless you or someone else shines light on them. The controls are very simple and are right on the game menu when you open it up.</p>

<p>Graphics were done by Derian McCrea and myself.
Code and concept are mine.</p>

<p>Downloads:</p>

<ul>
  <li><a href="ftp://ssh.tannerrogalsky.com/GRIDPHREAK_win_x86.zip">Windows 32-bit</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/GRIDPHREAK_win_x64.zip">Windows 64-bit</a></li>
  <li><a href="ftp://ssh.tannerrogalsky.com/GRIDPHREAK_mac.zip">Mac</a> (Works on OSX Lion (10.7), not on Snow Leopard (10.6) and not tested on earlier)</li>
  <li><a href="ftp://ssh.tannerrogalsky.com/GRIDPHREAK.love">Source</a></li>
</ul>


<p>Linux users should download the source and the appropriate <a href="https://love2d.org/">Love2D</a> binary for their distro. It requires version 0.8.0. Compiling Love2D from source is also really easy on Linux but I feel like you&rsquo;re sort of making your life harder than it needs to be.</p>

<p>I&rsquo;m happy enough with how it turned out that I do plan on continuing to work on it. Any further updates will come with a blog post until a more suitable update method can be established.</p>

<p>Let me know if there are any problems with the downloads or, you know, if anything is really cool. I&rsquo;ll follow up with some of the more interesting technical aspects of this game in the next few days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Control Maps in Love2D]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2012/04/06/control-maps-in-love2d/"/>
    <updated>2012-04-06T22:28:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2012/04/06/control-maps-in-love2d</id>
    <content type="html"><![CDATA[<p>In games with even moderately complicated control schemes, evaluating keypress events can easily become a large, unwieldy case or if/else statement. What we need is a way to simplify that code, compartmentalize it so that we can easily switch control schemes with player state as necessary and minimize the amount of evaluations we need to do.</p>

<!-- more -->


<p>We can achieve this fairly easily by mapping specific player actions into a hash. I&rsquo;ll be using Lua in this example but all the concepts will stay the same for any language with functions as first class citizens.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">control_map</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">keyboard</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">on_press</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">up</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span> <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">on_ground</span> <span class="k">then</span> <span class="n">self</span><span class="p">.</span><span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">400</span> <span class="k">end</span> <span class="k">end</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">on_release</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">on_update</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">right</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span> <span class="n">self</span><span class="p">.</span><span class="n">velocity</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">200</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>      <span class="n">left</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span> <span class="n">self</span><span class="p">.</span><span class="n">velocity</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">200</span> <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve split the keyboard input further into the sections where it will be referenced: on a key press, on a key release and whenever the player is updated. In this example, <code>self</code> refers to the player as, in this state, keyboard input only controls the player so I&rsquo;ve given it the player&rsquo;s context so that&rsquo;s it&rsquo;s easier to work with. It could just as easily be given the game&rsquo;s context, if necessary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nc">Main</span><span class="p">.</span><span class="nf">keypressed</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">unicode</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">action</span> <span class="o">=</span> <span class="n">game</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">control_map</span><span class="p">.</span><span class="n">keyboard</span><span class="p">.</span><span class="n">on_press</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">function&quot;</span> <span class="k">then</span> <span class="n">action</span><span class="p">()</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">PlayerCharacter</span><span class="p">:</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">action</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">control_map</span><span class="p">.</span><span class="n">keyboard</span><span class="p">.</span><span class="n">on_update</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">love</span><span class="p">.</span><span class="n">keyboard</span><span class="p">.</span><span class="n">isDown</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="k">then</span> <span class="n">action</span><span class="p">()</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are the parts of the code that actually trigger the actions mapped to those keys. It&rsquo;s much more efficient that a large if/else and, I think, easier to manage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Molyjam 2012]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2012/04/03/molyjam-2012/"/>
    <updated>2012-04-03T18:26:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2012/04/03/molyjam-2012</id>
    <content type="html"><![CDATA[<p>This past weekend, I participated in <a href="http://www.whatwouldmolydeux.com/">Molyjam</a> where I make a game based (loosely) on the tweet, &ldquo;You play a hole, you must move around an environment making certain elements fall into correct targets at the right time.&rdquo; It sort of evolved from that into a two person game.</p>

<p>One person plays Man. Man&rsquo;s goal is to collect lamps to get point. Only man can collect lamps.
The other person plays the Djinn. The Djinn&rsquo;s goal is to make Man fall. When man falls, the player&rsquo;s switch roles (but not keyboard positions!).
Both players can collect power ups. Power ups let the man double jump and let the Djinn make more holes.</p>

<p>Darin Walsh made the graphical art, Kyle Johnston made the music and I, Tanner Rogalsky, coded it.</p>

<p>Downloads:</p>

<ul>
  <li><a href="http://tannerrogalsky.github.com/downloads/h_vs_h.zip">Windows</a></li>
  <li><a href="http://tannerrogalsky.github.com/downloads/h_vs_h_mac.zip">Mac</a></li>
  <li><a href="http://tannerrogalsky.github.com/downloads/h_vs_h.love">Source</a></li>
</ul>


<p>Linux users should download the source and the appropriate <a href="https://love2d.org/">Love2D</a> binary for their distro. Compiling Love2D from source is also really easy on Linux but I feel like you&rsquo;re sort of making your life harder than it needs to be.</p>

<p>Let me know if there are any problems with the downloads or, you know, if anything is really cool.<!--more--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[N Level Generator]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2011/11/09/n-level-generator/"/>
    <updated>2011-11-09T14:10:00-05:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2011/11/09/n-level-generator</id>
    <content type="html"><![CDATA[<p>A while back, I ported and improved <a href="https://github.com/TannerRogalsky/LVLG">a level generator</a> for the platform game <a href="http://www.thewayoftheninja.org/n.html">N</a>. It was pretty good. The way it works is to generate tiles based on loose patterns and then plunk a random number of objects and gold onto the map. It then tests that the map is solvable using an A* algorithm and, if it&rsquo;s not, it regenerates. It was fast and generated levels with a playability of about 90% which could have been improved even more if I&rsquo;d wanted to put a bunch of edge cases in.<!--more--></p>

<p>But programming edge cases isn&rsquo;t fun. More than that, the levels weren&rsquo;t fun. In order to make a procedurally generated level fun, you have to, amongst other things, ensure that a player has to visit many if not all parts of the map in order to complete it. This is, typically, achieved through pathfinding through nodes and groups of nodes in an RPG or rogue-like dungeon but these maps didn&rsquo;t have anything like that and there wasn&rsquo;t an easy way to work that sort of information into them with the current system.</p>

<p>Thankfully, everyone and their game-developing grandmother has radical new ideas about tiling patterns and random map generation. Two of the most interesting articles I&rsquo;ve read recently are <a href="http://www.angryfishstudios.com/2011/04/adventures-in-bitmasking/">a look at using bitmasks to group tiles</a> and <a href="http://nothings.org/gamedev/herringbone/">a criticism of the Wang tiling system and suggestions for improvements</a>.</p>

<p>I&rsquo;m wondering if, together, these techniques could provide enough flexibility to be a suitable replacement for how I&rsquo;m currently generating tiles. I&rsquo;m sure I could commission some map-makers to create for me some segments, some readymades if you will, that I can categorize and put together in a way that would allow me to ensure that a player must traverse more of the map in order to complete it. It might also increase the playability to 99% or, dare I dream, 100%.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WTFJS]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2011/08/28/wtfjs/"/>
    <updated>2011-08-28T12:52:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2011/08/28/wtfjs</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="http://wtfjs.com/">this site</a>, I&rsquo;ve decided to share my own &ldquo;WTF, JS!&rdquo; moment.</p>

<p>My example involves unexpected behaviour in console.log. Consider the following snippet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward, right?  Think about what output you would expect when running that code. Maybe it would look a little like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems reasonable. But console.log, it would seem, prints asynchronously. So your actual output will look like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I should, apparently, stop using this for debugging. What the fuck.</p>

<p><strong>Edit:</strong> It&rsquo;s been brought to my attention that this produces the output you would expect in Firebug so this is more of <a href="http://code.google.com/p/chromium/issues/detail?id=91303">a &ldquo;WTF, Chrome!&rdquo; moment</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rasta.js]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2011/08/22/rasta-js/"/>
    <updated>2011-08-22T21:31:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2011/08/22/rasta-js</id>
    <content type="html"><![CDATA[<p>One of my <a href="http://pitr.ca/">co-workers</a> put this together for <a href="http://whyday.org/">Why Day</a>. It&rsquo;s a <a href="https://github.com/errorjs/Rasta.js/blob/master/public/rasta.js">tiny bit of JavaScript</a> with a backend on Heroku that allows you to store small bits of information without having to rely on the client-side. The major caveats are, I thought obviously, that it&rsquo;s not secure (Don&rsquo;t use this for passwords.) and that, unless you want to run your own backend, keys must be universally unique. I originally saw his post of it on Hacker News but I grabbed him after work today and asked him what his envisioned use-case was. He explained that, primarily, he saw it as a method of easy communication between frontends on different servers if you can&rsquo;t/don&rsquo;t want to set up your own server.</p>

<p><a href="http://rastajs.errorjs.com">Rasta.js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idiomatic Ruby]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2011/08/14/idiomatic-ruby/"/>
    <updated>2011-08-14T16:35:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2011/08/14/idiomatic-ruby</id>
    <content type="html"><![CDATA[<p>Ruby is, really, a great language in a lot of regards. It&rsquo;s expressive, powerful, easy to read and easy to write. It maintains a lot of features that people like and expect in a language, it has a simple and intuitive package manager and it has an enormous repository of frameworks and APIs that do a lot and work well.</p>

<p>I am relatively new to the Ruby world so this is a simplistic view of a complicated issue but it is a valid newcomer&rsquo;s perspective: Ruby is a good language; idiomatic Ruby is not. I&rsquo;d like to share some of my frustrations while learning ruby alongside someone who follows these practises.<!--more--></p>

<p>Implicit return statements are evil. Their only benefit is saving keystrokes but they make the code less immediately readable and less self-documenting. For a language that prides itself in having code made sense &ldquo;in English&rdquo; when it is read, the implicit return statement is both harmful and bizarre.</p>

<p>Using unless is a giant bag of worms. There are, I think, good times to use unless as a replacement for if not but I think that, often, the temptation to use it needlessly is too great for developers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">good</span><span class="p">(</span><span class="n">use</span><span class="p">)</span> <span class="k">unless</span> <span class="n">dev</span> <span class="o">==</span> <span class="n">lazy</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">unless</span> <span class="n">there_is_a_very_good_reason</span>
</span><span class='line'>    <span class="n">dont_do</span><span class="p">(</span><span class="n">this</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why would you not put parentheses around your method calls? I even like doing this one but I still know it&rsquo;s a bad idea. Trading a few keystrokes for the ability for everyone to read and understand your code with the least amount of difficulty is a trade-off we should be very, very rarely willing to make. I&rsquo;m sure there are others that I&rsquo;m not mentioning but these are the most immediate and violent offenders to my sensibilities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preamble]]></title>
    <link href="http://tannerrogalsky.github.com/blog/2011/08/06/preamble/"/>
    <updated>2011-08-06T13:29:00-04:00</updated>
    <id>http://tannerrogalsky.github.com/blog/2011/08/06/preamble</id>
    <content type="html"><![CDATA[<p>I set this up because thought a github-hosted site was a neat idea. I&rsquo;m not sure if I&rsquo;ll use it for anything particularly interesting. I might write about my experiences professionally but even regarding an interesting job hearing thing second-hand is rarely exciting.</p>

<p>I could write about my various personal projects. I would like to have some place explaining sort of what I&rsquo;ve already done or having a development log for ongoing projects. A place to broadcast ideas that I&rsquo;ve had or would otherwise like to share.</p>

<p>I do know what I don&rsquo;t want to do, though: a stream-of-consciousness blog or a collection of reviews. Or, you know, anything like this particular post.</p>
]]></content>
  </entry>
  
</feed>
